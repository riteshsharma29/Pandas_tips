1)

Input:
Invoice	 Items
INV201	Mobile, Trimmer
INV202	AC, Refrigerator

Desired Output:
Invoice	 Items
INV201	Mobile
INV201	Trimmer
INV202	AC
INV202	Refrigerator

df = pd.read_excel('Data.xlsx')
df_new = df.Items.str.split(', ',expand=true).set_index(df.Invoice).stack().reset_index(level=0,name='Items')
df_new = df_new.reset_index(drop=True)[['Invoice','Items']]

2) Below line wraps text within the DataFrame
pd.set_option('display.max_colwidth',-1)

3) https://www.kaggle.com/jaakkokivisto/pandas-tutorial-for-finance-bigtech-sharpe-ratios


##########################################################################################3333333333333333333333
#https://stackoverflow.com/questions/50731229/split-cell-into-multiple-rows-in-pandas-dataframe

'''
split comma/semicolon separated values into multiple coloumns as index
'''

#df dataframe

id	Invoice	Items	view	access
1	payments	1;2;3	yes	no
2	payments	4;5;6	no	no

#solution

df_new = (df.set_index(['id','Invoice', 'view', 'access'])
   .stack()
   .str.split(';', expand=True)
   .stack()
   .unstack(-2)
   .reset_index(-1, drop=True)
   .reset_index()
)


#output 

   id   Invoice view access Items
0   1  payments  yes     no     1
1   1  payments  yes     no     2
2   1  payments  yes     no     3
3   2  payments   no     no     4
4   2  payments   no     no     5
5   2  payments   no     no     6


##################################################################################################
3 Ways to Read Multiple CSV Files: For-Loop, Map, List Comprehension :
https://www.business-science.io/python/2021/09/21/python-read-csv.html?utm_content=bufferf6c1a&utm_medium=social&utm_source=linkedin.com&utm_campaign=buffer

###################################################################################################
Save memory with Pandas
https://marcobonzanini.com/2021/09/15/tips-for-saving-memory-with-pandas/
###################################################################################################
https://github.com/pandas-profiling/pandas-profiling
###################################################################################################
df = pd.read_excel("customer_products_data.xlsx",sheet_name="data")
# list with string which needs to find in <Product Name> column
array = ["tasty","bitter"]
# forcing <Product Name> column to lowercase
col = df['Product Name'].str.lower()
# empty list
r = []
for mystr in array:
    # find rows containing that string
    result = df.loc[col.str.contains(mystr)]
    r.append(result)
# create dataframe with filtered rows
result_df = pd.concat(r, axis=0)
result_df.to_excel("r.xlsx")


